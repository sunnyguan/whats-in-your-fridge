[{"/Users/test/Desktop/github/whats-in-your-fridge/src/index.js":"1","/Users/test/Desktop/github/whats-in-your-fridge/src/reportWebVitals.js":"2","/Users/test/Desktop/github/whats-in-your-fridge/src/App.js":"3","/Users/test/Desktop/github/whats-in-your-fridge/src/components/Home.js":"4","/Users/test/Desktop/github/whats-in-your-fridge/src/components/Dashboard.js":"5","/Users/test/Desktop/github/whats-in-your-fridge/src/components/Recipe.js":"6","/Users/test/Desktop/github/whats-in-your-fridge/src/components/Intro.js":"7","/Users/test/Desktop/github/whats-in-your-fridge/src/services/UserInfo.js":"8","/Users/test/Desktop/github/whats-in-your-fridge/src/components/auth/Logout.js":"9","/Users/test/Desktop/github/whats-in-your-fridge/src/components/FoodList.js":"10","/Users/test/Desktop/github/whats-in-your-fridge/src/components/Recipes.js":"11","/Users/test/Desktop/github/whats-in-your-fridge/src/components/auth/Login.js":"12","/Users/test/Desktop/github/whats-in-your-fridge/src/components/RecipeDetails/DetailedRecipe.js":"13","/Users/test/Desktop/github/whats-in-your-fridge/src/components/graph/Graph.js":"14"},{"size":500,"mtime":1609976754978,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1609976754980,"results":"17","hashOfConfig":"16"},{"size":149,"mtime":1610054876991,"results":"18","hashOfConfig":"16"},{"size":877,"mtime":1610055722018,"results":"19","hashOfConfig":"16"},{"size":5376,"mtime":1610054480096,"results":"20","hashOfConfig":"16"},{"size":5376,"mtime":1610056543172,"results":"21","hashOfConfig":"16"},{"size":2144,"mtime":1610054377936,"results":"22","hashOfConfig":"16"},{"size":1555,"mtime":1610079367542,"results":"23","hashOfConfig":"16"},{"size":736,"mtime":1610045341223,"results":"24","hashOfConfig":"16"},{"size":7587,"mtime":1610072186340,"results":"25","hashOfConfig":"16"},{"size":1425,"mtime":1610056488028,"results":"26","hashOfConfig":"16"},{"size":849,"mtime":1610038060128,"results":"27","hashOfConfig":"16"},{"size":2220,"mtime":1610055692203,"results":"28","hashOfConfig":"16"},{"size":7254,"mtime":1610058017312,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1wmv010",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},"/Users/test/Desktop/github/whats-in-your-fridge/src/index.js",[],["60","61"],"/Users/test/Desktop/github/whats-in-your-fridge/src/reportWebVitals.js",[],"/Users/test/Desktop/github/whats-in-your-fridge/src/App.js",[],"/Users/test/Desktop/github/whats-in-your-fridge/src/components/Home.js",[],"/Users/test/Desktop/github/whats-in-your-fridge/src/components/Dashboard.js",[],"/Users/test/Desktop/github/whats-in-your-fridge/src/components/Recipe.js",[],"/Users/test/Desktop/github/whats-in-your-fridge/src/components/Intro.js",[],"/Users/test/Desktop/github/whats-in-your-fridge/src/services/UserInfo.js",[],"/Users/test/Desktop/github/whats-in-your-fridge/src/components/auth/Logout.js",[],"/Users/test/Desktop/github/whats-in-your-fridge/src/components/FoodList.js",["62","63","64","65"],"/Users/test/Desktop/github/whats-in-your-fridge/src/components/Recipes.js",[],"/Users/test/Desktop/github/whats-in-your-fridge/src/components/auth/Login.js",[],"/Users/test/Desktop/github/whats-in-your-fridge/src/components/RecipeDetails/DetailedRecipe.js",[],"/Users/test/Desktop/github/whats-in-your-fridge/src/components/graph/Graph.js",["66"],"import React, { useEffect } from 'react';\nimport { VictoryChart, VictoryLine, VictoryTheme, VictoryLabel } from 'victory';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { getUserList, addToSpending, removeFromSpending } from '../../services/UserInfo';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth'\nimport Grid from '@material-ui/core/Grid';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    demo: {\n        backgroundColor: theme.palette.background.paper,\n    },\n    title: {\n        margin: theme.spacing(0, 0, 2),\n    },\n    addItem: {\n        marginBottom: \"10px\",\n\n    }\n}));\n\nfunction Graph(props) {\n    const classes = useStyles();\n    const [spendings, setSpendings] = React.useState([]);\n    const [spendingItem, setSpendingItem] = React.useState(\"\");\n\n    const [open, setOpen] = React.useState(false);\n\n    const getGridListCols = () => {\n        if (isWidthUp('md', props.width))\n            return 6\n        return 12;\n    }\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleSubmit = () => {\n        addSpending(spendingItem);\n        setOpen(false);\n    }\n\n    const retrieve = () => {\n        getUserList(props.user.googleId).then(data => {\n            console.log(data);\n            setSpendings(data[\"spending\"]);\n        })\n    }\n\n    useEffect(() => retrieve(), []);\n\n    const addSpending = (value) => {\n        addToSpending(props.user.googleId, value).then(data => setSpendings(data[\"spending\"]));\n    }\n    const deleteSpending = (value) => {\n        removeFromSpending(props.user.googleId, value).then(data => setSpendings(data[\"spending\"]));\n    };\n\n    const arrayMax = (arr) => {\n        if (!arr || arr.length === 0) return 100;\n        return arr.reduce(function (a, b) {\n            let p = parseInt(a);\n            let v = parseInt(b);\n            return p > v ? p : v;\n        });\n    }\n\n    return (\n        <div className={classes.root}>\n            <Grid container spacing={3}>\n                <Grid item xs={getGridListCols()}>\n                    <VictoryChart\n                        width={400}\n                        height={400}\n                        theme={VictoryTheme.material}\n                        domain={{ y: [0, arrayMax(spendings)] }}\n                    >\n                        <VictoryLabel text=\"Spending Trend\" textAnchor=\"middle\" x={200} y={25}/>\n                        <VictoryLine\n                            style={{\n                                data: { stroke: \"#c43a31\" },\n                                parent: { border: \"1px solid #ccc\" }\n                            }}\n                            data={\n                                spendings.map((item, index) => { return { \"x\": index + 1, \"y\": parseInt(item) } })\n                            }\n                        />\n                    </VictoryChart>\n                </Grid>\n                <Grid item xs={getGridListCols()}>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        {props.user.givenName}'s Spending:\n          </Typography>\n\n                    <div className={classes.demo}>\n                        <List dense={false}>\n                            <Button className={classes.addItem} variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n                                Add new item\n                   </Button>\n                            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                                <DialogTitle id=\"form-dialog-title\">New Item</DialogTitle>\n                                <DialogContent>\n                                    <DialogContentText>\n                                        Please enter your food item\n                       </DialogContentText>\n                                    <TextField\n                                        autoFocus\n                                        margin=\"dense\"\n                                        id=\"item\"\n                                        label=\"Spending Item\"\n                                        type=\"text\"\n                                        value={spendingItem}\n                                        onInput={e => setSpendingItem(e.target.value)}\n                                        fullWidth\n                                    />\n                                </DialogContent>\n                                <DialogActions>\n                                    <Button onClick={handleClose} color=\"primary\">\n                                        Cancel\n                       </Button>\n                                    <Button onClick={handleSubmit} color=\"primary\">\n                                        Add\n                       </Button>\n                                </DialogActions>\n                            </Dialog>\n                            {spendings && spendings.map((val) => (\n                                <>\n                                    <ListItem>\n                                        <ListItemAvatar>\n                                            <Avatar>\n                                                <FolderIcon />\n                                            </Avatar>\n                                        </ListItemAvatar>\n                                        <ListItemText\n                                            primary={val}\n                                        //secondary={secondary ? 'Secondary text' : null}\n                                        />\n                                        <ListItemSecondaryAction>\n                                            <IconButton edge=\"end\" aria-label=\"delete\" onClick={() => deleteSpending(val)} >\n\n                                                <DeleteIcon />\n                                            </IconButton>\n                                        </ListItemSecondaryAction>\n                                    </ListItem>\n                                </>\n                            ))}\n                        </List>\n\n                    </div>\n                </Grid>\n            </Grid>\n        </div>\n    );\n\n\n}\n\nexport default withWidth()(Graph);",{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":23,"column":20,"nodeType":"73","messageId":"74","endLine":23,"endColumn":32},{"ruleId":"71","severity":1,"message":"75","line":46,"column":12,"nodeType":"73","messageId":"74","endLine":46,"endColumn":24},{"ruleId":"71","severity":1,"message":"76","line":46,"column":26,"nodeType":"73","messageId":"74","endLine":46,"endColumn":41},{"ruleId":"77","severity":1,"message":"78","line":73,"column":33,"nodeType":"79","endLine":73,"endColumn":35,"suggestions":"80"},{"ruleId":"77","severity":1,"message":"78","line":74,"column":33,"nodeType":"79","endLine":74,"endColumn":35,"suggestions":"81"},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'EditTextarea' is defined but never used.","Identifier","unusedVar","'selectedFile' is assigned a value but never used.","'setSelectedFile' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'retrieve'. Either include it or remove the dependency array.","ArrayExpression",["84"],["85"],"no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},{"desc":"86","fix":"88"},"Update the dependencies array to be: [retrieve]",{"range":"89","text":"90"},{"range":"91","text":"90"},[2464,2466],"[retrieve]",[2406,2408]]